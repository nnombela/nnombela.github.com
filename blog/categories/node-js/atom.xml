<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | NN.blog.last()]]></title>
  <link href="http://nnombela.github.com/blog/categories/node-js/atom.xml" rel="self"/>
  <link href="http://nnombela.github.com/"/>
  <updated>2012-05-16T09:06:54+02:00</updated>
  <id>http://nnombela.github.com/</id>
  <author>
    <name><![CDATA[Nicolas Nombela]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Asincronicidad en Node.js]]></title>
    <link href="http://nnombela.github.com/blog/2012/03/21/asincronicidad-en-node-dot-js/"/>
    <updated>2012-03-21T11:53:00+01:00</updated>
    <id>http://nnombela.github.com/blog/2012/03/21/asincronicidad-en-node-dot-js</id>
    <content type="html"><![CDATA[<p>El modelo de programación de Node.js es monohilo, asíncrono y dirigido por eventos. En esta primera parte del
post veremos algo de código que nos permita entender un poco mejor que significa programar en un modelo monohilo asíncrono,
en la segunda parte de post veremos un ejemplo de programación dirigida por eventos utilizando eventos propios.</p>

<p>Tener un sólo hilo de ejecución para todo el código tiene varias consecuencias en nuestro código de las que hay que estar alerta, estas
son:</p>

<!-- more -->


<ol>
<li><p>No puede haber código bloqueante o todo el servidor quedará bloqueado y esto incluye no responder a nuevas peticiones entrantes.
Cualquier tarea que pueda dar lugar a esperas activas o simplemente su tiempo de ejecución sea demasiado grande debe ser tratado
de manera asíncrona. Esto incluye muy especialmente
todas las tareas que impliquen algún tipo de comunicación I/O, salida a red, a base de datos o incluso al sistema de ficheros. Si tenemos
alguna tarea computacionalmente intensiva deberemos intentar trocearla en varios bloques o trocearla en el tiempo (time-slice) para
darle respiro al servidor y que pueda atender otros bloques de código, afortunadamente esto último no es nada habitual.</p></li>
<li><p>La asincronicidad implica que no sabemos cuándo ni en que orden se va a ejecutar el código, generalmente esto no es importante
pero en ocasiones sí lo es y habrá que tenerlo en cuenta. En cuanto al cuándo lo más habitual será tener que tener en cuenta
un posible evento de <code>timeout</code>, si estamos utilizando un modulo externo será tan simple como suscribirnos al evento, si es código
propio utilizaremos la función <code>setTimeout()</code>. En cuanto al orden de ejecución, algo también poco habitual, si tenemos que controlarlo
utilizaremos <code>callbacks</code> anidados o la función <code>process.nextTick()</code> para retrasar la ejecución dentro de la cola de eventos.
Luego veremos ejemplos de utilización de estas funciones.</p></li>
<li><p>En caso de error inesperado debemos capturarlo y controlar el posible estado en que haya podido quedar la ejecución
del código. Muy especialmente en caso de haya recursos que no hayan sido liberados, haya tareas
(bloques de código o <code>callbacks</code>) dependientes de la tarea que ha generado el error o tengamos una política de reintentos.
Aunque si nuestro código es realmente
asíncrono y dirigido por eventos la liberación de los recursos ocurrirá cuando salte el  correspondiente evento de <code>timeout</code> asociado al
recurso o el <code>timeout</code> asociado a la tarea dependiente.</p></li>
</ol>


<p>Llegado a este punto uno puedo pensar que programar en un modelo mohilo asíncrono es mucho más difícil que programar en un modelo
multihilo sincrono más tradicional, pero no es así por que para programar BIEN en servidor en cualquier de los dos modelos un programador
tiene que tener siempre en la cabeza y tener en cuenta todos todos los aspectos anteriores, que se resumen en:</p>

<ol>
<li>Esperas y posibilidad de código bloqueante</li>
<li>Eventos de <code>timeouts</code> en la comunicación I/O</li>
<li>Capturas de errores inesperados, política de reintentos y liberación de recursos</li>
</ol>


<p>En la programación de servidor multihilo sincrona más tradicional todos estos aspectos quedan ocultos, no forman parte
 del modelo de programación, en muchas muchísimas ocasiones no se tienen en cuenta, incluso por programadores expertos.
 Erróneamente se puede llegar a pensar que la lógica que tiene que tener todo esto en cuenta no es necesaria en un primer
 momento o es una forma de optimización prematura, además no resulta sencillo implementar la lógica de manera correcta.</p>

<blockquote><p>Es decir, en este tipo de modelo de programación es muy fácil o casi inevitable programar MAL código de servidor.</p></blockquote>

<p>En cambio en la programación de servidor monohilo asíncrono dirigida por eventos todos estos aspectos están presentes de serie
 desde el princio, forman parte del modelo de programación, son mucho más evidentes y si no se tienen en cuenta el posible problema no pasa inadvertido y desde el principio
 se manifiesta con resultados a veces catastróficos como dejar el servidor bloqueado. Ademas la programación asíncrona por eventos
 resulta la manera más sencilla, correcta y desacoplada de tratar con todos los aspectos anteriores.</p>

<blockquote><p>Es decir, en este tipo de modelo de programación es difícil o fácilmente evitable programar MAL código de servidor.</p></blockquote>

<p>Ahora vamos a ver un ejemplo sencillo de código bloqueante, de esperas, de la cola de eventos y de timeouts. Veamos
primero un ejemplo de código bloqueante, un "Hello World" con un bloque de código bloqueante.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;util&quot;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">writeResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">:</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">});</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="nx">util</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;OnRequest ended&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">sleepSynch</span><span class="p">(</span><span class="nx">seconds</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">startTime</span> <span class="o">+</span> <span class="mi">1000</span> <span class="o">*</span> <span class="nx">seconds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do nothing</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">writeResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">util</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;OnRequest started&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">sleepSynch</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>   <span class="c1">// bloque síncrono</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// sleepAsynch(10, response)   // bloque asíncrono</span>
</span><span class='line'><span class="c1">// sleepAsynchWithNextTick(10, response); // bloque asíncrono con nextTick</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Listening on port 8888&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>sleepSynch</code> es un bloque de código síncrono, espera activamente durante 10 segundos sin hacer nada, es un simple bucle
<code>while</code> que comprueba el tiempo transcurrido. Pudiera ser un bloque que realiza una tarea computacionalmente intesiva o una lectura
o escritura en disco de un fichero de gran tamaño o cualquier otra tarea bloqueante, lo importante del ejemplo es que si
lo ejecutamos veremos como nuestro servidor de "Hola Mundo después de 10 segundos" queda bloqueado y es más bien un servidor
de "Hola Mundo después de 10 segundos o mucho más". Atiende las peticiones en serie una detrás de otra.</p>

<p>Vamos a ver ahora este mismo ejemplo pero utilizando código asíncrono no bloqueante, todo queda igual excepto el bloque de
código bloqueante que ahora sería asíncrono</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">sleepAsynch</span><span class="p">(</span><span class="nx">seconds</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">doResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1000</span> <span class="o">*</span> <span class="nx">seconds</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>La función <code>setTimeout()</code> es un función nativa asíncrona, muy frecuéntemente utilizada en Node.js para controlar
tiempos de ejecución de código. Lo importante es ver que ahora nuestro servidor de "Hola Mundo después de 10 segundos" queda
desbloqueado, ahora ya es capaz de responder a todas las peticiones de forma paralela (al menos de forma efectiva)</p>

<p>Por último vamos a ver otra forma de conseguir la asincronicidad de forma menos óptima utizando la función <code>process.nextTick()</code>. Esta
función acepta un bloque de código o <code>callback</code> que será ejecutado una vez vaciada la cola de eventos actual, mediante esta técnica
conseguimos que el servidor no quede bloqueado y que el resto de tareas tengan oportunidad de ejecutarse.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">sleepAsynchWithNextTick</span><span class="p">(</span><span class="nx">seconds</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">endTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1000</span> <span class="o">*</span> <span class="nx">seconds</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="nx">check</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">endTime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">check</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">doResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})()</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>La función <code>process.nextTick()</code> es un técnica sencilla de conseguir asincronicidad y evitar el bloqueo del servidor, otra forma
hubiese sido utilizar un <code>setTimeout(0, ..)</code> con tiempo 0, otra forma posible forma
hubiese sido emitir un evento propio y escuchar por ese evento, aunque no está nada claro el orden de ejecución de los eventos
dentro de la cola de eventos, no he encontrado documentación al respecto...</p>

<p>Espero que este ejemplo simple sirva para entender un poco mejor el modelo de programación de Node.js, en la segunda parte de este
post veremos un ejemplo de programación dirigida por eventos propios</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sobre Node.js]]></title>
    <link href="http://nnombela.github.com/blog/2012/03/16/sobre-node-dot-js/"/>
    <updated>2012-03-16T12:12:00+01:00</updated>
    <id>http://nnombela.github.com/blog/2012/03/16/sobre-node-dot-js</id>
    <content type="html"><![CDATA[<p>En el <a href="http://nnombela.com/blog/2012/02/17/eventual-consistency/">post</a> anterior comenté que <a href="htt://nodejs.org">Node.js</a> era la tecnología
que más rápidamente he visto crecer en poco tiempo. Realmente
a poco que uno lo siga, el fenómeno es abrumador. El sistema de paquetes de Node <a href="http://npmjs.org/">npm</a> tiene cerca
de <a href="http://search.npmjs.org/">8000 paquetes</a>! A pesar del poco tiempo muchos de ellos ya están siendo utilizados en producción en proyectos
reales y por empresas muy serias como Amazon, Linkedlin y Microsoft. Actualmente es el tecnología que más actividad
y crecimiento tiene en GitHub.</p>

<p>Un ejemplo real que pone de manifiesto este fenómeno sería <a href="http://ldapjs.org/">ldapjs</a>, es un LDAP hecho con Node.js en 4 días
prácticamente desde cero! A 24 horas de su publicación en twitter ya había un proyecto utilizándolo y en una semana ya
estaba integrado en varios proyectos importantes. En comparación un proyecto similar hecho en
Java <a href="http://www.opends.org/">OpenDS</a> ha tardado 1 año en sacar la primera versión estable (y no es mucho tiempo) y apenas tiene
actividad. Estamos hablando de una ratio de 1 a 100 en tiempos de desarrollo, es una salvajada, desde luego es un caso
extremo y no creo que esa sea la norma, pero da una idea del dinamismo y de la velocidad a la que se está moviendo el
fenómeno Node.js que desde luego está atrapando a desarrolladores con mucho talento.</p>

<!-- more -->


<p>Resulta curioso que el fenómeno que protagoniza Node.js en el lado del servidor es en realidad una cara de un fenómeno
más amplio y que tiene como movimiento recíproco lo que está ocurriendo en el lado del cliente con JQuery y frameworks
MVC que tradicionalmente estaban en el servidor como Backbone.js. La capa cliente se hace cada vez más pesada
pareciéndose más a la capa servidor y por el otro lado la capa servidor se hace cada vez más ligera pareciéndose
más a la capa cliente. Curioso.</p>

<p>De hecho más que hablar de capas es más correcto hablar de nodos. Donde antes había dos lados (cliente y servidor)
completamente distintos en cuanto a lenguaje, lógica, modelo de programación y peso, ahora empieza a vislumbrarse
lo contrario, dos nodos, cliente y servidor muy parecidos (lenguaje, modelo de programación, tipo de lógica) y con
un peso también parecido (mayor peso en el lado cliente y menor en el lado servidor).</p>

<blockquote><p>Tanto es el parecido entre el nodo cliente y el nodo servidor que ya hay interesantes
iniciativas en <a href="http://npmjs.org/">npm</a> como <a href="http://nowjs.com/">nowjs</a> para que el acoplamiento y comunicación entre ambos nodos sea aún más directo,
transparente y sencillo.</p></blockquote>

<p>Vamos a repasar las características de Node.js para entender un poco mejor este nuevo
modelo de programación en servidor (nuevo en cuanto a popularidad). Empecemos con la característica más sorprendente:</p>

<ul>
<li><p><strong>Single Threaded</strong>. <em>Todo tu código (no todo el código pero sí el tuyo) corre en un único hilo de ejecución. No se vosotros
pero la primera vez que vi esto no encontré ningún aspecto positivo, después de conocerlo mejor tengo que decir que
estaba equivocado y que de hecho puede ser muy positivo en aspectos en los que la programación web más tradicional
falla continuamente, como es la complejidad de la programación multi-hilo o en la ejecución inadvertida de código
bloqueante, para entender cómo un defecto puede convertirse en virtud hay que explicar la siguiente característica.</em></p></li>
<li><p><strong>Asynchronous Event Driven</strong>. <em>Se utiliza un modelo de programación asíncrona dirigida por eventos.
Este es el modelo que permite que la ejecución en un único hilo sea posible. La asincronicidad es una característica
no ideal en cualquier modelo de programación, una perdida de información, se pierden dos cosas: el intervalo de
tiempo y el orden de ejecución del código. Es el precio que hay que pagar a cambio de ganar en otros aspectos</em></p></li>
</ul>


<p>Veamos cuáles son estos aspectos:</p>

<ol>
<li><p>El código asíncrono dirigido por eventos es, en principio, código no bloqueante, entendido bloqueante como aquel
en el que el código (la CPU) no esta haciendo nada constructivo excepto esperar por alguna condición externa, típicamente
algún tipo de comunicación I/O. En realidad el
código en Node.js puede ser igualmente bloqueante, pero resulta primero, más difícil hacerlo inadvertidamente, y
segundo, resulta más catastrófico (recuerda que sólo hay un único hilo de ejecución). El programador es mucho más
consciente del problema, su estilo de programación tiende a ser completamente asíncrono y cuando no lo es en seguida
advierte el problema, no queda oculto como ocurre en la programación multi-hilo.</p>

<p>  He tenido la oportunidad de ver y incluso auditar bastantes aplicaciones web con problemas de rendimiento hechas en Java,
en el 100% de los casos Java como lenguaje no tenía nada que ver con el problema. El problema estaba en muchos casos
en código bloqueante: Acceso a otros Servicios Web, acceso a BBDD o acceso al sistema de ficheros, en ese orden.</p></li>
<li><p>El código asíncrono no sólo es idealmente no bloqueante sino que como consecuencia de ello es más
eficiente (no consume tiempo de esperas) y por lo tanto su rendimiento y su eficiencia son mayorres. Además como
todo tu código corre en un único hilo no existe el “overhead” asociado al cambio de hilo.</p></li>
<li><p>Como el código corre en un único hilo no existen, en principio, los problemas asociados al código multihilo, que
tan difíciles son de detectar y de solucionar (aunque de hecho puede haberlos igualmente). Hay menos código y es más sencillo y por lo tanto es más mantenible</p></li>
<li><p>La programación dirigida por eventos permite una programación mucho más modular, ya no es necesario diseñar
cuidadosamente las dependencias entre módulos.  En la programación por eventos la comunicación se realiza emitiendo
eventos y registrando <code>listeners</code> de esos eventos, es un mecanismo totalmente desacoplado del diseño. El resultado es
código mucho más sencillo, más desacoplado, más modular y sobre todo con mucha más flexibilidad respecto a los
cambios de diseño, aunque también tiene sus aspecto negativos como la dificultad en la depuración.</p></li>
</ol>


<p>En cierta manera el modelo de programación asíncrono, mono-hilo y dirigido por eventos sería equivalente a un modelo
altamente multi-hilo, donde cada uno de los trozos de código asíncronos o <code>callbacks</code> es un hilo de ejecución por
software o <code>green thread</code> y los eventos son mensajes que se envían y reciben por los hilos siguiendo un patrón parecido
al <code>Actor Model</code> , carece de la sofisticación del modelo implementado en Erlang o Scala, pero el principio es básicamente
el mismo, en mi opinión, y al mismo tiempo es más simple de utilizar. Este tipo de modelos están demostrando tener grandes ventajas
en el lado del servidor.</p>

<p>La programación asíncrona mono-hilo y dirigida por eventos no es una gran desconocida para el programador web, al
menos no para aquel que no trabaja exclusivamente en código de servidor, ya que es el modelo que se utiliza en la
programación cliente con el código JavaScript que se ejecuta dentro del navegador. Y lo ha hecho con enorme éxito y
esa es una de las razones que ha hecho este mismo modelo se haya llevado al servidor en Node.js</p>

<p>En el post anterior <a href="http://nnombela.com/blog/2012/02/17/eventual-consistency/">Eventual Consistency</a> comentaba que el
modelo de programación de Node.js es uno de los que mejor
encajan con el modelo de datos con consistencia eventual, ahora ya podemos ver por qué es así, la consistencia eventual
implica asincronicidad y el modelo de programación asíncrono usado en Node.js es uno de los más sencillos.</p>

<p>Por último comentar un detalle importante sobre Node.js, utiliza JavaScript como lenguaje de programación (aunque hay
una tendencia cada vez más fuerte a utilizar CoffeScript). Existen frameworks similares en
Python <a href="http://twistedmatrix.com/trac/">Twisted</a> y Ruby <a href="http://rubyeventmachine.com/">Event Machine</a> y el
modelo de programación web
dirigido por eventos no es ni siquiera novedoso, pero una de las claves de la explosión de Node.js ha sido la decisión
muy acertada de su creador <a href="http://www.youtube.com/watch?v=jo_B4LTHi3I">Ryan Dahl</a> de usar JavasScript como lenguaje y el
motor V8 de Chrome.</p>
]]></content>
  </entry>
  
</feed>
